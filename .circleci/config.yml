version: 2

references:

  ## Workspace

  workspace: &workspace
    ~/code
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
      persist_to_workspace:
        root: *workspace
        paths:
          - app/build/intermediates
          - app/build/outputs/androidTest-results
          - app/build/outputs/apk
          - app/build/outputs/code-coverage
          - app/build/test-results
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase


  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-node8-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
      CC_TEST_REPORTER_ID: c342bb63e793195a677321a1d94de234ce26390f1ce3d387b0b56a9ed63df9e4
    dependencies:
      pre:
          - source environmentSetup.sh && copyEnvVarsToGradleProperties
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

jobs:

  ## Build debug APK and instrumented test APK

  build_debug:
    <<: *android_config
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run:
          name: Approve license for build tools
          command: (echo y; echo y; echo y; echo y; echo y; echo y) | $ANDROID_HOME/tools/bin/sdkmanager --licenses

      - run:
          name: Assemble APKs
          command: ./gradlew assembleDebug assemble

      - run:
          name: Assemble APKs
          command: ./gradlew assembleDebugAndroidTest assemble

      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/



  ## Run unit tests

  test_unit:
    <<: *android_config
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Run Lint Test
          command: ./gradlew lint test

      - run:
          name: Run Unit Tests
          command: ./gradlew test
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

  ## Run instrumented tests

  test_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json

      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}

      - run:
          name: Configure environment
          command: |
            echo 'export APK_PATH=`find . -path "*.apk" ! -path "*unaligned.apk" ! -path "*Test*.apk" -print -quit`' >> $BASH_ENV
            echo 'export TEST_APK_PATH=`find "." "-path" "*Test*.apk" -print -quit`' >> $BASH_ENV

      - run:
          name: Run UI Tests
          command: gcloud firebase test android run --type instrumentation --app ${APK_PATH} --test ${TEST_APK_PATH} --device model=Nexus5X,version=26,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/tmp/code-coverage/connected/coverage.ec --directories-to-pull=/sdcard/tmp --timeout 30m
          no_output_timeout: 30m

      - run:
          name: Create directory to store test results
          command: mkdir firebase

      - run:
          name: Download instrumented test results from Firebase Test Lab on success
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-y2wqcmr8p12a0-im0krj4x10zpq | tail -1`*" /root/workspace/firebase/
      - *persist_debug_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Submit JaCoCo coverage report

  report_coverage:
    <<: *android_config
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *attach_debug_workspace
      - *attach_firebase_workspace
      - run:
          name: Move Firebase coverage report
          command: mkdir -p app/build/outputs/code-coverage/connected && cp firebase/Nexus5X-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/coverage.ec

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
         name: Generate JaCoCo report
         command: ./gradlew jacocoTestReport
      - run:
         name: Upload coverage to code climate
         command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            ./cc-test-reporter format-coverage app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage

      - run:
          name: Upload coverage report to CodeCov
          command: bash <(curl -s https://codecov.io/bash)
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results


workflows:
  version: 2
  workflow:
    jobs:
      - build_debug
      - test_unit:
          requires:
            - build_debug
      - test_instrumented:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumented
